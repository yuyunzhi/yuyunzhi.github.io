<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 余韵之</title>
    <link>http://www.yuyunzhi.com/categories/javascript/</link>
    <description>Recent content in JavaScript on 余韵之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jan 2020 23:00:23 +0800</lastBuildDate>
    
	<atom:link href="http://www.yuyunzhi.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TS 重构 axios</title>
      <link>http://www.yuyunzhi.com/js-ts-axios/</link>
      <pubDate>Mon, 20 Jan 2020 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-ts-axios/</guid>
      <description>一、做什么 1、使用TypeScript从0实现一个axios库
2、实现完整的单元测试
3、发布到单元测
4、使用工具:Jest单元测试 Commitizen规范化注释 RollupJS打包 TSLint代码风格一致性 Prettier美化代码 Semantic release管理版本发布
5、掌握axios的实现原理
二、TypScript基础知识 1、需要有nodejs环境
2、安装TypeScript
sudo npm install -g typescript 安装成功 运行 tsc -V 出现版本好。</description>
    </item>
    
    <item>
      <title>Promise</title>
      <link>http://www.yuyunzhi.com/js-promise/</link>
      <pubDate>Sat, 11 Jan 2020 13:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-promise/</guid>
      <description>一、Promise使用注意点 1、Promise 构造函数是同步执行的，promise.then 中的函数是异步执行的。
const promise = new Promise((resolve, reject) =&amp;gt; { console.log(1) resolve() console.log(2) }) promise.then(() =&amp;gt; { console.log(3) }) console.log(4) 运行结果：
1 2 3 4 2、promise 有 3 种状态：pending、fulfilled 或 rejected。状态改变只能是 pending-&amp;gt;fulfilled 或者 pending-&amp;gt;rejected，状态一旦改变则不能再变。
const promise1 = new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(&amp;#39;success&amp;#39;) }, 1000) }) const promise2 = promise1.then(() =&amp;gt; { throw new Error(&amp;#39;error!!!&amp;#39;) }) console.log(&amp;#39;promise1&amp;#39;, promise1) console.log(&amp;#39;promise2&amp;#39;, promise2) setTimeout(() =&amp;gt; { console.log(&amp;#39;promise1&amp;#39;, promise1) console.</description>
    </item>
    
    <item>
      <title>常用的跨域方案</title>
      <link>http://www.yuyunzhi.com/js-cross-domain/</link>
      <pubDate>Mon, 06 Jan 2020 15:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-cross-domain/</guid>
      <description>一、什么是跨域？ 1.什么是同源策略及其限制内容？
同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指&amp;quot;协议+域名+端口&amp;quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
同源策略限制内容有：
 Cookie、LocalStorage、IndexedDB 等存储性内容 DOM 节点 AJAX 请求发送后，结果被浏览器拦截了  但是有三个标签是允许跨域加载资源：、、2.常见跨域场景
当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。
跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。
二、跨域解决方案 1.jsonp
利用 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。
JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。
2.cors
服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。
3.nginx反向代理
4.Node中间件代理(两次跨域)
实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。 代理服务器，需要做以下几个步骤：
 接受客户端请求 。 将请求 转发给服务器。 拿到服务器 响应 数据。 将 响应 转发给客户端。  </description>
    </item>
    
    <item>
      <title>JavaScript 5种继承方式</title>
      <link>http://www.yuyunzhi.com/js-inherit/</link>
      <pubDate>Mon, 06 Jan 2020 13:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-inherit/</guid>
      <description>1、原型链继承 //父类型 function Person(name, age) { this.name = name, this.age = age, this.play = [1, 2, 3] this.setName = function () { } } Person.prototype.setAge = function () { } //子类型 function Student(price) { this.price = price this.setScore = function () { } } Student.prototype = new Person() // 子类型的原型为父类型的一个实例对象 var s1 = new Student(15000) var s2 = new Student(14000) console.log(s1,s2) 特点：
 父类新增原型方法/原型属性，子类都能访问到 简单，易于实现  缺点：
 子类继承的时候会作为公有属性，这样子类1操作这个属性的时候，就会影响到子类2 创建子类实例时，无法向父类构造函数传参 要想为子类新增属性和方法，必须要在Student.</description>
    </item>
    
    <item>
      <title>js异步执行顺序及Event Loop</title>
      <link>http://www.yuyunzhi.com/js-asynchronous-order/</link>
      <pubDate>Sun, 05 Jan 2020 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-asynchronous-order/</guid>
      <description>1、JS执行顺序 先看一段代码，得出执行顺序：1、9、5、0、6、2、7、4、8、3
(function() { setTimeout(() =&amp;gt; { console.log(0); }); new Promise(resolve =&amp;gt; { console.log(1); setTimeout(() =&amp;gt; { resolve(); Promise.resolve().then(() =&amp;gt; { console.log(2); setTimeout(() =&amp;gt; console.log(3)); Promise.resolve().then(() =&amp;gt; console.log(4)); }); }); Promise.resolve().then(() =&amp;gt; console.log(5)); }).then(() =&amp;gt; { console.log(6); Promise.resolve().then(() =&amp;gt; console.log(7)); setTimeout(() =&amp;gt; console.log(8)); }); console.log(9); })(); 思路：主线程会先执行一遍，执行，异步（宏任务、微任务）压入栈。当主线程执行完毕后就会从队列里取出任务（微任务&amp;gt;宏任务）。每次执行微任务或宏任务都会把该任务分解同步、宏任务、微任务，重复上面的步骤。
  所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）
  主线程之外，还存在一个&amp;quot;任务队列&amp;rdquo;（task queue）。只要异步任务有了运行结果，就在&amp;quot;任务队列&amp;quot;之中放置一个事件。
  一旦&amp;quot;执行栈&amp;quot;中的所有同步任务执行完毕，系统就会读取&amp;quot;任务队列&amp;rdquo;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
  主线程不断重复上面的第三步。
  宏任务一般是：包括整体代码script，setTimeout，setInterval、I/O、UI render
微任务主要是：Promise、Object.observe、MutationObserver
2、从一道题浅说 JavaScript 的事件循环 //请写出输出内容 async function async1() { console.</description>
    </item>
    
    <item>
      <title>Vue实现业务功能</title>
      <link>http://www.yuyunzhi.com/js-vue-business-functions/</link>
      <pubDate>Tue, 05 Mar 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-vue-business-functions/</guid>
      <description>一、实现逻辑功能 1、导航显示二级菜单  鼠标进入显示 鼠标移开隐藏 多个菜单使用同一个函数  HTML --------------- &amp;lt;div @mouseover=&amp;#34;showSubmenu(&amp;#39;show&amp;#39;,&amp;#39;Language&amp;#39;)&amp;#34; @mouseout=&amp;#34;showSubmenu(&amp;#39;hide&amp;#39;,&amp;#39;Language&amp;#39;)&amp;#34; &amp;gt; &amp;lt;span&amp;gt;Language&amp;lt;/span&amp;gt; &amp;lt;ul class=&amp;#34;submenu&amp;#34; v-show=&amp;#34;showLanguage&amp;#34;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a class=&amp;#34;language&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;中文&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a class=&amp;#34;language&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;English&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a class=&amp;#34;language&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Espanol&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt;  使用鼠标onmouseover及mouseout来监听事件,传入两个参数x,y x表示show或hide,y表示触发状态的元素  JS --------------- showSubmenu(status,item){ if(item == &amp;#39;Language&amp;#39;){ status==&amp;#39;show&amp;#39;?this.showLanguage=true:this.showLanguage=false } if(item == &amp;#39;Individual&amp;#39;){ status==&amp;#39;show&amp;#39;?this.showIndividual=true:this.showIndividual=false } ………… } 2、搜索框  函数节流，输入过程中显示相关的搜索清单  if(this.timer){ clearTimeout(this.timer) } this.timer = setTimeout(( //发送请求 //对请求后的数据处理 )=&amp;gt;{},1000)  输入不同的类型内容跳转不同页面，同时传id  输入过程中，结合函数节流从后端获取输入的内容的类型，根据类型判断跳转不同的页面 JS --------------- gotoNewPage(list){ if(list.type==&amp;#34;city&amp;#34;){ //进入city页面 传参为list.cid this.</description>
    </item>
    
    <item>
      <title>Vue全局引入文件</title>
      <link>http://www.yuyunzhi.com/js-vue-import/</link>
      <pubDate>Fri, 01 Mar 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-vue-import/</guid>
      <description> 写Vue项目的时候，需要对代码进行优化，重复使用的组件、样式、JS进行全局引入并统一管理，这样对代码的维护会很好。
 1、全局引入scss文件 安装sass-resources-loader
npm i sass-resources-loader --save-dev 然后修改vue-cli的build/utils.js，找到scss的加载设置替换
scss: generateLoaders(&amp;#39;sass&amp;#39;) 替换成
scss: generateLoaders(&amp;#39;sass&amp;#39;).concat({ loader:&amp;#39;sass-resources-loader&amp;#39;, options:{ resources:path.resolve(__dirname,&amp;#39;./../src/assets/scss/base.scss&amp;#39;) } }), 2、全局引入JS文件 在main.js 引入，并挂在到原型链上，如api.js
import API from &amp;#39;./assets/js/api/api.js&amp;#39; Vue.prototype.$api = API; 3、全局引入基础组件 在main.js 引入
import Icon from &amp;#39;./components/y-c/icon.vue&amp;#39; Vue.component(&amp;#39;y-icon&amp;#39;,Icon) 4、全局引入函数 在main.js引入，并挂在到原型链上
Vue.prototype.$xxx = function(){} </description>
    </item>
    
    <item>
      <title>Vue虚拟DOM</title>
      <link>http://www.yuyunzhi.com/js-vue-dom/</link>
      <pubDate>Mon, 18 Feb 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-vue-dom/</guid>
      <description>一、为什么要使用虚拟DOM  首先说说为什么要使用Virturl DOM，因为操作真实DOM的耗费的性能代价太高，所以Vue内部使用js实现了一套dom结构，在每次操作在和真实dom之前，使用实现好的diff算法，对虚拟dom进行比较，递归找出有变化的dom节点，然后对其进行更新操作。 为了实现虚拟DOM，我们需要把每一种节点类型抽象成对象，每一种节点类型有自己的属性，也就是prop，每次进行diff的时候，会先比较该节点类型，假如节点类型不一样，那么Vue会直接删除该节点，然后直接创建新的节点插入到其中，假如节点类型一样，那么会比较prop是否有更新，假如有prop不一样，那么Vue会判定该节点有更新，那么重渲染该节点，然后在对其子节点进行比较，一层一层往下，直到没有子节点。  二、使用虚拟DOM 1、代码示例 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;y-div @click=&amp;#34;outerFny&amp;#34; level=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;/y-div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { components: { &amp;#39;y-div&amp;#39;: { data() { return { value: &amp;#39;123&amp;#39; } }, props: [&amp;#39;level&amp;#39;], render: function (createElement) { return createElement( &amp;#39;div&amp;#39;, { &amp;#39;class&amp;#39;: { foo: true, bar: false }, style:{ width:&amp;#39;100px&amp;#39;, height:&amp;#39;100px&amp;#39;, } }, [ createElement(&amp;#39;p&amp;#39;,{ on: { click: this.handler }, &amp;#39;class&amp;#39;: { foo: true, bar: false }, style: { fontSize: &amp;#39;14px&amp;#39;, }, },&amp;#39;nnnnnnnnn&amp;#39;), createElement(&amp;#39;p&amp;#39;,&amp;#39;wwwwwww&amp;#39;) ] ) }, methods: { handler() { console.</description>
    </item>
    
    <item>
      <title>vue-test-utils&amp;持续集成</title>
      <link>http://www.yuyunzhi.com/js-vue-test-utils/</link>
      <pubDate>Fri, 25 Jan 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-vue-test-utils/</guid>
      <description>一、测试有哪些分类 1、黑白测试  根据代码的思路写测试叫白盒测试 不知道代码的思路测试叫黑盒测试（大部分人工测试都是这个）  2、规模（小-&amp;gt;大）  单元测试（最小的测试是函数，也是白盒测试） 模块测试（根据API测试） 功能测试 集成测试（多个系统端对端测试E2E，也是黑盒测试）  二、单元测试的必要性  你不一定一辈子当前端 开发库（公司里的库必须要有），没有单元测试公司很难有优质代码的积累 测试驱动开发  三、前端业务代码是否需要测试  不需要 业务代码中的共用代码才需要测试：比如表单验证（抽离出组件，测组件） 然后做高质量的组件，输出给团队用  四、什么才算是好的单元测试  测试覆盖率&amp;gt;90%，基本上都是好的测试 测试内容：语句、分支、函数、行  五、测试工具介绍  这里使用Karma + Mocha做单元测试，TravisCI做持续集成 Karma（[ˈkɑrmə] 卡玛）是一个测试运行器，它可以呼起浏览器，加载测试脚本，然后运行测试用例 Mocha（[ˈmoʊkə] 摩卡）是一个单元测试框架/库，它可以用来写测试用例 Sinon（西农）是一个 spy / stub / mock 库，用以辅助测试 karma-coverage 来设置 Karma 的代码覆盖率 chaijs 提供了dscribe it断言  除此之外了解两个词语：
 BDD 行为驱动开发 Behavior Driven Development TDD 测试驱动开发 Test Driven Development  五、安装工具及配置 1、创建karma 配置  安装依赖  npm add -D karma karma-chrome-launcher karma-mocha karma-sourcemap-loader karma-spec-reporter karma-webpack chai sinon sinon-chai 安装成功：  创建 karma.</description>
    </item>
    
    <item>
      <title>前端性能优化</title>
      <link>http://www.yuyunzhi.com/js-performance-optimization/</link>
      <pubDate>Wed, 21 Nov 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-performance-optimization/</guid>
      <description>1、使用懒加载  组件懒加载  const xxx =()=&amp;gt;import(&amp;#39;./components/xxx.vue&amp;#39;)  路由懒加载  2、减少或合并DOM操作或使用虚拟DOM // 不好的方式 //var elem = $(&amp;#39;#elem&amp;#39;); //for (var i = 0; i &amp;lt; 100; i++) { // elem.append(&amp;#39;&amp;lt;li&amp;gt;element &amp;#39;+i+&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;); //} // 好的方式 var elem = $(&amp;#39;#elem&amp;#39; ), arr = []; for (var i = 0; i &amp;lt; 100; i++) { arr.push(&amp;#39;&amp;lt;li&amp;gt;element &amp;#39; +i+&amp;#39;&amp;lt;/li&amp;gt;&amp;#39; ); } elem.append(arr. join(&amp;#39;&amp;#39;)); 3、减少监听器，使用事件委托 function listen(element, eventType, selector, fn) { element.addEventListener(eventType, e =&amp;gt; { let el = e.</description>
    </item>
    
    <item>
      <title>实现动态数据生成PDF</title>
      <link>http://www.yuyunzhi.com/js-generate-pdf/</link>
      <pubDate>Mon, 22 Oct 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-generate-pdf/</guid>
      <description>最近在做一个业务功能，根据后端传来的数据给每个不同的用户动态生成不同的pdf并下载。
   方案一、使用window.print()
pass,打印出来的东西跟页面结构关联度太高，且不是pdf
  方案二、使用pdfmake 当然还有其他的jsPDF，这里我选择了pdfmake
  一、先搞定能够下载PDF   github ：官方说-&amp;gt;pdfmake
  Get Start
  &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#39;en&amp;#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#39;utf-8&amp;#39;&amp;gt; &amp;lt;title&amp;gt;my first pdfmake example&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#39;build/pdfmake.min.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#39;build/vfs_fonts.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 引入 pdfmake.min.js 引入 vfs_fonts.js 可到cdnjs里获取链接：cdnjs-&amp;gt;
 创建内容  var docDefinition = { content: &amp;#39;This is an sample PDF printed with pdfMake&amp;#39; };  下载、打开、打印内容  pdfMake.createPdf(docDefinition).download(); pdfMake.createPdf(docDefinition).open(); pdfMake.createPdf(docDefinition).print(); 然后这虽然可以下载，但是内容为中文时会乱码，以及需要设置样式，下面一一道来</description>
    </item>
    
    <item>
      <title>SASS常用方法</title>
      <link>http://www.yuyunzhi.com/js-sass/</link>
      <pubDate>Mon, 01 Oct 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-sass/</guid>
      <description>一、基于Vue的SASS安装  安装Vue-cli 这里不介绍了 安装SASS  npm install node-sass --save-dev npm install sass-loader --save-dev  在webpack.base.conf.js文件添加scss  { test: /\.scss$/, loaders: [&amp;#34;style&amp;#34;, &amp;#34;css&amp;#34;, &amp;#34;sass&amp;#34;] },  在Vue单文件里使用SASS  &amp;lt;style scoped lang=&amp;#34;scss&amp;#34; type=&amp;#34;text/css&amp;#34;&amp;gt;  启动 npm run dev 会热更新  二、SASS与SCSS的区别  主要是写法不一样，语法一样 SASS格式  #sidebar width: 30% background-color: #faa  SCSS格式  #sidebar { width: 30%; background-color: #faa; } 三、SASS语法 1、变量  SASS允许使用变量，所有变量以$开头  $blue : #1875e7;　div{ color : $blue; } 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中</description>
    </item>
    
    <item>
      <title>自己动手封装一个AJAX函数</title>
      <link>http://www.yuyunzhi.com/js-generate-ajax/</link>
      <pubDate>Wed, 05 Sep 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-generate-ajax/</guid>
      <description>这是一件很有意思的事，封装一个抽象性函数，就相当于可以把这个函数用在类似相同的环境中。 1、知道AJAX的功能 2、把AJAX的功能封装成函数 3、用Promise优化封装的函数
 一、AJAX有哪些功能？  客户端的JS发起请求（浏览器上的） 服务端的JS发送响应（Node.js上的）  1、JS 可以设置任意请求 header 吗？  第一部分 request.open(&amp;lsquo;get&amp;rsquo;, &amp;lsquo;/xxx&amp;rsquo;) 第二部分 request.setHeader(&amp;lsquo;content-type&amp;rsquo;,&amp;lsquo;x-www-form-urlencoded&amp;rsquo;) 第四部分 request.send(&amp;lsquo;a=1&amp;amp;b=2&amp;rsquo;)  2、JS 可以获取任意响应 header 吗？  第一部分 request.status / request.statusText 第二部分 request.getResponseHeader() / request.getAllResponseHeaders() 第四部分 request.responseText  二、window.jQuery.ajax 之前写过window.jQuery，而这次写window.jQuery.ajax。
封装AJAX函数，JS代码如下：
window.jQuery.ajax = function(obj){ let url=obj.url let method=obj.method let body=obj.body let successFn=obj.successFn let headers=obj.heaaders let failFn=obj.failFn let request = new XMLHttpRequest() request.open(method, url) // 配置request第一部分 for(let key in headers){ let value = headers[key]; request.</description>
    </item>
    
    <item>
      <title>什么是Ajax？</title>
      <link>http://www.yuyunzhi.com/js-ajax/</link>
      <pubDate>Tue, 04 Sep 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-ajax/</guid>
      <description>一、我们如何向服务器发送请求？  用 form 可以发请求，但是会刷新页面或新开页面 用 a 可以发 get 请求，但是也会刷新页面或新开页面 用 img 可以发 get 请求，但是只能以图片的形式展示 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示 用 script 可以发 get 请求，但是只能以脚本的形式运行  那么有没有什么方式，可以使用get、post、put、delete 请求都行，并且用任意的方式返回给浏览器展示？
当然有，这个就是AJAX。
二、什么是AJAX？ Jesse James Garrett 讲同时满足以下技术取名叫做AJAX:异步的 JavaScript 和 XML。
 使用 XMLHttpRequest 发请求 服务器返回 XML 格式的字符串 JS 解析 XML，并更新局部页面  如何使用XMLHttpRequest？
JS文件代码如下：
myButton.addEventListener(&amp;#39;click&amp;#39;, (e)=&amp;gt;{ let request = new XMLHttpRequest() request.open(&amp;#39;get&amp;#39;, &amp;#39;/xxx&amp;#39;) // 配置request，请求方式和路径 request.onreadystatechange = ()=&amp;gt;{ if(request.readyState===4){ //当请求相应完毕，执行以下代码 if(request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.</description>
    </item>
    
    <item>
      <title>初学jQuery,从封装函数开始</title>
      <link>http://www.yuyunzhi.com/js-jquery/</link>
      <pubDate>Sun, 02 Sep 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-jquery/</guid>
      <description>一、封装两个函数getSiblings()、addClass() 1、getSiblings()根据一个元素的id，获取该元素的兄弟元素id的集合 逻辑： 1、找到node的父元素的所有子元素id集合allChildren; 2、初始化一个空对象用于存放查询的集合，即伪数组(没有push等功能); 3、遍历allChildren; 4、判断allChildren[i]!==node是否为真; 5、若为真，array[array.length]=allChildren[i],注意这是伪数组没有push的方法; 6、调用方式:getSiblings(item3) 7、代码如下：
function getSiblings(node){ //API var allChildren=node.parentNode.children var array = { length:0 } for(var i=0; i&amp;lt;allChildren.length;i++){ if(allChildren[i]!==node){ array[array.length]=allChildren[i]; array.length+=1 } } return array } 2、addClass()根据一个元素的id，给改元素增加一个class node是一个元素的id，classes是一个数组如：var classes = {&amp;lsquo;a&amp;rsquo;:true,&amp;lsquo;b&amp;rsquo;:false,&amp;lsquo;c&amp;rsquo;:true}
逻辑：
1、对该classes遍历，因为该classes不是以数字为key，所以用key in classes; 2、判断value是否为真; 3、如果为真，那么给该node增加一个class; 4、调用方式如：addClass(item2,{book:true}) 5、代码如下：
function addClass(node,classes){ //对一个哈希进行遍历 for(var key in classes){ var value = classes[key] if(value){ node.classList.add(key) } } } 二、命名空间、Node.prototype、Node2 1、命名空间 window.yyzdom = {} yyzdom.getSiblings = function (node){} //把花括号代码块写进来 yyzdom.</description>
    </item>
    
    <item>
      <title>JSONP是个什么鬼？</title>
      <link>http://www.yuyunzhi.com/js-jsonp/</link>
      <pubDate>Thu, 02 Aug 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-jsonp/</guid>
      <description>花了一天的时间学习JSONP，总结一下以后方便回顾。在了解什么是JSONP前，需要先了解什么是数据库，如何向服务器进行请求得到响应，可以用那些方式发送请求？如何向不同的服务器发送请求并获得响应？然后推出啥是JSOPN？内容有些长~~
 一、数据库是什么？   文件系统就是一种数据库：能长久存数据，能够对内容进行增、删、改、储存
  MySQL是一种数据库
  二、向数据库做加法  要做的流程如下： 点击“提交1元钱”发送请求给服务器，服务器修改数据库内容，响应返回所需数据。 用两种方式来做：图片请求；script请求；
 方案一：用图片的src向服务器发送get请求
html代码如下：
&amp;lt;body&amp;gt; &amp;lt;p&amp;gt;账户金额：&amp;lt;span id=&amp;#34;amount&amp;#34;&amp;gt;!!!amount!!!&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;button id=&amp;#34;button&amp;#34;&amp;gt;付款1元钱&amp;lt;/button&amp;gt; &amp;lt;script&amp;gt; button.addEventListener(&amp;#39;click&amp;#39;, (e)=&amp;gt;{ let image = document.createElement(&amp;#39;img&amp;#39;) image.src = &amp;#39;/pay&amp;#39; image.onload = function(){ // 状态码是 200~299 则表示图片请求成功 alert(&amp;#39;成功&amp;#39;) } amount.innerText = amount.innerText -1 image.onerror = function(){ // 状态码大于等于 400 则表示图片请求失败 alert(&amp;#39;失败&amp;#39;) } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 其中!!!amount!!!表示一个占位符，后端通过获取这个占位符把数据库里的内容赋值给它。
**解释：**当用户点击button按钮的时候，用图片发送了路径为/pay的GET请求给服务器。服务器收到后执行下面的代码，依次是： 1、判断路径 2、读取数据库的内容，假如是9966。原始数据设置的是10000 3、在最新的内容减1，并保存给变量newAmount 4、把newAmount保存到数据库，那么这个时候的值应该为9965 5、确定返回给浏览器的内容类型为 image/jpg 6、返回一张图片 7、结束</description>
    </item>
    
    <item>
      <title>var、let、const的区别是什么？</title>
      <link>http://www.yuyunzhi.com/js-var-let-const/</link>
      <pubDate>Wed, 25 Jul 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-var-let-const/</guid>
      <description>var  var 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为 undefined 。 内层变量可能覆盖外层变量 用来计数的循环变量泄露为全局变量  var a = 100; console.log(a,window.a); // 100 100 let b = 10; console.log(b,window.b); // 10 undefined const c = 1; console.log(c,window.c); // 1 undefined let  声明的全局变量不会挂在顶层对象下面 所声明的变量一定要在声明后使用，否则报错，报错 ReferenceError 暂时性死区，只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（ binding ）这个区域，不再受外部的影响，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。 不允许重复声明  const  声明的全局变量不会挂在顶层对象下面 const 声明之后必须马上赋值，否则会报错 const 简单类型一旦声明就不能再更改，复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改。 const 一旦声明变量，就必须立即初始化，不能留到以后赋值。 const 命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。  const a = 100; const list = []; list[0] = 10; console.</description>
    </item>
    
    <item>
      <title>JS中的继承</title>
      <link>http://www.yuyunzhi.com/js-extend/</link>
      <pubDate>Fri, 20 Jul 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-extend/</guid>
      <description>什么是继承？继承就是子类拥有父类的各种属性和方法
  什么是类？这里的JS的类即是函数，能产生对象的东西就是类
  继承需要两个类：父类和子类，在JS中的继承需要有2次对原型的搜索。
  如何让子类拥有父类的属性和方法？
  //原理 子类(&amp;#39;参数&amp;#39;){ 父类.call(this,&amp;#39;参数&amp;#39;) } 子类.prototype.__proto__=父类.prototype 好了，现在开始说明举例。
分为ES5和ES6的写法以及两者的区别。
一、ES5中如何完成JS的继承？ 1、声明一个父类函数，父类函数有一个name的属性和run()的方法 function Human(name){ this.name = name } Human.prototype.run = function(){ console.log(&amp;#34;我叫&amp;#34;+this.name+&amp;#34;，我在跑&amp;#34;) return undefined } 2、声明一个子类函数，并从父类函数中继承属性 function Man(name){ Human.call(this, name) //是Human的属性 this.gender = &amp;#39;男&amp;#39; //是自己的属性 } Man.prototype.fight = function(){ console.log(&amp;#39;xxx&amp;#39;) } 注意，Human.call(this, name)就是从父类继承属性，这句代码很重要
3、从父类函数继承方法 //添加一句这样的代码就可以了 Man.prototype.__proto__=Human.prototype 然而IE不兼容这个代码所以要换另一种方式
var f = function(){} f.prototype = Human.prototype Man.prototype = new f()  原因是什么？因为当 var a =new f()的时候  会发生5个步骤： 产生一个空对象 this=空对象 this.</description>
    </item>
    
    <item>
      <title>移动端是怎么做适配的？</title>
      <link>http://www.yuyunzhi.com/js-mobile-adaptation/</link>
      <pubDate>Mon, 09 Jul 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-mobile-adaptation/</guid>
      <description>这里介绍个方案包含5个点：1、meta viewport；2、媒体查询；3、动态rem方案；4、对rem微调；5、其他细节补充。
 一、meta viewport &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; 在head标签内部加上这段代码。
该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度。
width=device-width: 让当前viewport宽度等于设备的宽度 user-scalable=no: 禁止用户缩放 initial-scale=1.0: 设置页面的初始缩放值为不缩放 maximum-scale=1.0: 允许用户的最大缩放值为1.0 minimum-scale=1.0: 允许用户的最小缩放值为1.0 二、媒体查询（响应式） 1、格式一 @media （）and（）{} //满足（）里的条件，就执行大括号里css的样式 举例：
&amp;lt;style&amp;gt; @media (max-width:320px){ body{ background:red; } } @media (min-width:321px) and (max-width:320px){ body{ background:orange; } } @media (min-width:376px) and (max-width:425px){ body{ background:green; } } @media (min-width:426px) and (max-width:768px){ body{ background:blue; } } @media (min-width:769px){ body{ background:grey; } } &amp;lt;/style&amp;gt; 2、格式二 并举例</description>
    </item>
    
    <item>
      <title>什么是MVC？</title>
      <link>http://www.yuyunzhi.com/js-mvc/</link>
      <pubDate>Thu, 07 Jun 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-mvc/</guid>
      <description>这段时间写代码，总是会忘记之前写的代码是什么意思？ 那怎么办呢？ 有什么好的办法能够清晰的看明白自己之前写的代码或让别人也更好的一目了然？ 当然有，那就是…… 用MVC。
 一、什么是MVC MVC是Model View Controller
 View：是这个js模块对应在html中的部分，就是展示给用户看的那一部分 Model：可以从服务器获得数据，把数据传给Controller。还要将Controller监听到的用户提交的数据上传到服务器 Controller：调用model的数据，用来更新view。还要监听用户在view上的操作，获取用户提交的数据，传给model  二、举个例子来理解 今天做了个留言板
但是第一次用MVC重新改自己的代码花了我三个小时&amp;hellip;..来说说步骤：
1、模块化 不同类型功能的JS代码放在不同的JS文件。同时一个监听事件包含了多个功能，要用队列来分开：xxx.addEventListener(&amp;lsquo;yyy&amp;rsquo;,function(){})
2、立即执行函数  有些时候我们不想要全局变量，所以我们要使用局部变量 在ES 5 里面只有函数有局部变量，于是我们声明一个 function xxx，然后 xxx.call() 然而 xxx 是全局变量（全局函数），所以我们得用匿名函数：function(){}.call() 但是 Chrome 会语法错误，试出来一种方法可以不报错:！function(){}.call()  3、使用闭包 如果要两个模块变量能够访问……
!function(){ var people={ name:&amp;#39;yukaka&amp;#39;, age:25 } window.yukakaGrouUp = function(){ people.age += 1 return people.age } }.call() 解释：
 立即执行函数使得people 无法被外部访问 闭包使得匿名函数可以操作 people window.yukakaGrowUp 保存了匿名函数的地址 任何地方都可以调用 window.yukakaGrowUp（） =&amp;gt; 任何地方都可以使用 window.yukakaGrowUp 操作 people，但是不能直接访问 people  **什么是闭包？**函数内部使用了函数外面的变量，那么这个函数和这个变量加起来叫做闭包。</description>
    </item>
    
    <item>
      <title>什么是闭包，闭包的用途是什么？</title>
      <link>http://www.yuyunzhi.com/js-closure/</link>
      <pubDate>Thu, 03 May 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-closure/</guid>
      <description>一、什么是闭包？ 声明一个变量，声明一个函数，在函数内部访问外部的变量，那么这个函数加这个变量叫做闭包。
如下代码：
var x = &amp;#39;变量&amp;#39; function f(){ console.log(x) } 二、闭包有何作用？ 1、闭包的用途是间接访问一个变量或隐藏一个变量，我们无法直接访问到函数内部的变量，必须通过一个函数间接的访问到；
2、可以把变量的值保存在内存中；即使暂时没有使用。
function foo() { var a = 2 function bar() { console.log(a) } return bar } var xxx = foo() xxx() // 2 上面的代码中，变量a和函数bar组成了一个闭包。return bar只是为了bar能够被使用，跟闭包无关。</description>
    </item>
    
    <item>
      <title>声明一个函数立即执行</title>
      <link>http://www.yuyunzhi.com/js-function-excute/</link>
      <pubDate>Thu, 03 May 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-function-excute/</guid>
      <description>不要用全局变量做id 或变量，容易覆盖。如果偏要用，那么……声明一个函数立即执行。
 一、声明一个函数立即执行的三种方式 1、在函数末尾加上.() function (){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) }.() 2、在函数末尾加上.call() function(){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) }.call() 3、声明完函数，立即调用 function xxx(){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) } xxx() 但是浏览器会报错，怎么解决？
二、解决浏览器报错 1、技巧1：整体加括号 （function(){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) }.call()） 2、技巧2：对匿名函数加括号 （function(){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) }）.call() 3、技巧3：在函数前加-或+或！或~号，告诉浏览器后面是一个值 -function(){ var parent = document.querySelector(&amp;#39;#self&amp;#39;) }.call() 注意：在一个{}里用let声明一个变量，这个变量的作用局就是在这个花括号里</description>
    </item>
    
    <item>
      <title>iframe a form input table</title>
      <link>http://www.yuyunzhi.com/js-html/</link>
      <pubDate>Mon, 02 Apr 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/js-html/</guid>
      <description>iframe与a标签嵌套： &amp;lt;iframe name=&amp;#34;xxx&amp;#34; src=&amp;#34;http://baidu.com&amp;#34; frameborder=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;a target=&amp;#34;xxx&amp;#34; href=&amp;#34;http://qq.com&amp;#34;&amp;gt;qq&amp;lt;/a&amp;gt; 解释： 1、默认打开情况，iframe打开的是百度页面； 2、iframe标签的name为xxx，与a标签target为xxx向对应结合使用，那么点击a标签，打开的是QQ页面； 3、frameborder不写的话会有一个默认border，往往不写的话比较难看；
一、a标签（get请求） 1、可以写一个跳转链接： &amp;lt;a target=&amp;#34;xxx&amp;#34; href=&amp;#34;http://qq.com&amp;#34;target=&amp;#34;_blank&amp;#34;&amp;gt;qq&amp;lt;/a&amp;gt; &amp;lt;a target=&amp;#34;xxx&amp;#34; href=&amp;#34;http://qq.com&amp;#34;target=&amp;#34;_self&amp;#34;&amp;gt;qq&amp;lt;/a&amp;gt; &amp;lt;a target=&amp;#34;xxx&amp;#34; href=&amp;#34;http://qq.com&amp;#34;target=&amp;#34;_parent&amp;#34;&amp;gt;qq&amp;lt;/a&amp;gt; &amp;lt;a target=&amp;#34;xxx&amp;#34; href=&amp;#34;http://qq.com&amp;#34;target=&amp;#34;_top&amp;#34;&amp;gt;qq&amp;lt;/a&amp;gt; 在HTML中target目标的四个参数的用法：
target=&amp;#34;_blank&amp;#34;表示：将链接的画面内容，在新的浏览视窗中打开。打开新窗口； target=&amp;#34;_self&amp;#34;表示：在自己的窗口打开。如果被iframe 嵌套，这在当前这个iframe窗口打开，而不是当前浏览器窗口； target=&amp;#34;_parent&amp;#34;表示：将链接的画面内容，当成文件的上一个画面。即：当父窗口打开。 target=&amp;#34;_top&amp;#34;表示：将框架中链接的画面内容，显示在没有框架的视窗中（即除去了框架)。即：顶端打开窗口。 2、点击a标签下载文件 &amp;lt;a href=&amp;#34;http://qq.com&amp;#34; download&amp;gt;下载&amp;lt;/a&amp;gt; 3、a标签的href到底可以写什么？ href=&amp;#34;xxx.html&amp;#34; //就会跳到: 当前地址/xxx.html href=&amp;#34;？name=qqq&amp;#34; //就会跳到: 当前地址/？name=qqq href=&amp;#34;javascript:alert(1);&amp;#34; //点击执行javascript内容 href=&amp;#34;javascript: ;&amp;#34; //点击后什么也不做的a标签-伪协议 href=&amp;#34;#&amp;#34; //页面会回到头部 二、form标签（post请求） &amp;lt;form action=&amp;#34;users&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;yyy&amp;#34;&amp;gt;用户名&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;账号&amp;#34; id=&amp;#34;yyy&amp;#34;&amp;gt; &amp;lt;label&amp;gt;密码&amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;密码&amp;#34; &amp;gt;&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;提交&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; 解释： 1、form表单里面的input的type没有submit属性，就无法提交； 2、label标签的for=yyy 与 input标签的id=yyy 同时出现，点击文字就能聚焦到输入框，或用label套input也行；</description>
    </item>
    
  </channel>
</rss>