<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on 余韵之</title>
    <link>http://www.yuyunzhi.com/categories/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on 余韵之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 18 Jan 2020 23:00:23 +0800</lastBuildDate>
    
	<atom:link href="http://www.yuyunzhi.com/categories/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue</title>
      <link>http://www.yuyunzhi.com/interview-vue/</link>
      <pubDate>Sat, 18 Jan 2020 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-vue/</guid>
      <description>一、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？ key是给每一个vnode的唯一id,可以依靠key,更准确, 更快的拿到oldVnode中对应的vnode节点。
如果不加key，某些节点有绑定数据（表单）状态，会出现状态错位。</description>
    </item>
    
    <item>
      <title>HTML、CSS</title>
      <link>http://www.yuyunzhi.com/interview-es6/</link>
      <pubDate>Tue, 07 Jan 2020 13:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-es6/</guid>
      <description>1、let 和 const let 所声明的变量，可以改变
let a = 123 a = 456 // 正确，可以改变 let b = [123] b = [456] // 正确，可以改变 const 声明一个只读的常量。一旦声明，常量的值就不能改变。简单类型的数据（数值、字符串、布尔值），不可以变动。复合类型的数据（主要是对象和数组），可以这样子变动。
const a = 123 a = 456 // 报错，不可改变 const b = [123] b = [456] // 报错，不可以重新赋值，不可改变 const a = [123] a.push(456) // 成功 const b = {} b.name = &amp;#39;demo&amp;#39; // 成功 对于 数值、字符串、布尔值 经常会变的，用 let 声明。
对象、数组和函数用 const 来声明。
2、解构赋值 数组
一次性声明多个变量，结合扩展运算符：</description>
    </item>
    
    <item>
      <title>JavaScript一些常用方法</title>
      <link>http://www.yuyunzhi.com/interview-js-api/</link>
      <pubDate>Fri, 03 Jan 2020 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-js-api/</guid>
      <description>一、instanceof 和 typeof 1、typeof使用: typeof一般被用于判断一个变量的类型是否为以下7种 ：number, string, object, boolean, function, undefined, symbol。但是typeof 在判断一个 object的数据的时候只能告诉我们这个数据是 object, 而不能细致的具体到是哪一种 object
typeof 1 // number typeof &amp;#34;1&amp;#34; // string typeof [] //object typeof function(){} // function typeof {} // object typeof null // object typeof undefined // undefined typeof true // boolean typeof Object // function 2、typeof null 为什么结果是 object ?因为底层储存变量的时候000表示对象，而 null 的所有机器码也均为0, undefined 用 −2^30 整数来表示。所以 typeof null 结果为object。
3、Object.prototype.toString.call 使用这个方法来对一个变量类型进行比较准确的判断。
Object.prototype.toString.call(1) // &amp;#34;[object Number]&amp;#34; Object.</description>
    </item>
    
    <item>
      <title>JavaScript输出结果题</title>
      <link>http://www.yuyunzhi.com/interview-js-console/</link>
      <pubDate>Fri, 03 Jan 2020 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-js-console/</guid>
      <description>1、下面程序输出的结果是 ？ if (!(&amp;#34;a&amp;#34; in window)) { var a = 1; } alert(a); // undefined 代码解析：如果 window 不包含属性 a，就声明一个变量 a，然后赋值为 1。
首先，在 es6 之前，所有的全局变量都是 window 的属性，语句 var a = 1; 等价于 window.a = 1; 你可以用如下方式来检测全局变量是否声明：&amp;ldquo;变量名称&amp;rdquo; in window
所以：
var a; alert(&amp;#34;a&amp;#34; in window); // true 2、下面的输出结果是 ？ var out = 25, inner = { out: 20, func: function() { var out = 30; return this.out; } }; console.log((inner.func, inner.func)()); //25 console.</description>
    </item>
    
    <item>
      <title>JavaScript知识</title>
      <link>http://www.yuyunzhi.com/interview-js/</link>
      <pubDate>Thu, 02 Jan 2020 17:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-js/</guid>
      <description>1、常见的浏览器内核有哪些 ？介绍一下你对浏览器内核的理解 ?  Trident 内核：IE, 360，搜狗浏览器 MaxThon、TT、The World,等 Gecko 内核：火狐，FF，MozillaSuite / SeaMonkey 等 Presto 内核：Opera7 及以上 Webkit 内核：Safari，Chrome 等  内核主要分成两部分：渲染引擎(layout engineer 或 Rendering Engine) 和 JS 引擎。
渲染引擎：
负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。 浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。 所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。
JS 引擎：
解析和执行 javascript 来实现网页的动态效果。 最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。
2、call、apply、bind  call 跟 apply 的用法几乎一样，唯一的不同就是传递的参数不同，call 只能一个参数一个参数的传入。 apply 则只支持传入一个数组，哪怕是一个参数也要是数组形式。最终调用函数时候这个数组会拆成一个个参数分别传入。 至于 bind 方法，他是直接改变这个函数的 this 指向并且返回一个新的函数，之后再次调用这个函数的时候 this 都是指向 bind 绑定的第一个参数。 bind 传参方式跟 call 方法一致。  简易版本bind实现
Function.prototype.bind = function(context) { var self = this; return function() { return self.</description>
    </item>
    
    <item>
      <title>HTML、CSS</title>
      <link>http://www.yuyunzhi.com/interview-html/</link>
      <pubDate>Thu, 02 Jan 2020 13:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/interview-html/</guid>
      <description>1、简述一下 src 与 href 的区别  href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。 src 是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置； 在请求 src 资源时会将其指向的资源下载并应用到文档内，例如 js 脚本，img 图片和 frame 等元素。 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 js 脚本放在底部而不是头部。  2、html 中 title 属性和 alt 属性的区别 ？ 有title,那么无论图片能不能正常显示，鼠标放上去都会出现title。有alt，当图片不能正常加载的时候，会显示alt内容。
&amp;lt;img src=&amp;#34;#&amp;#34; alt=&amp;#34;alt 信息&amp;#34; /&amp;gt; 当图片不输出信息的时候，会显示 alt 信息， 鼠标放上去没有信息。 当图片正常读取，不会出现 alt 信息。
&amp;lt;img src=&amp;#34;#&amp;#34; alt=&amp;#34;alt 信息&amp;#34; title=&amp;#34;title 信息&amp;#34; /&amp;gt; 当图片不输出信息的时候，会显示 alt 信息，鼠标放上去会出现 title 信息。 当图片正常输出的时候，不会出现 alt 信息，鼠标放上去会出现 title 信息。
3、讲述你对 reflow回流 和 repaint重绘 的理解 原因：浏览器渲染机制 戳戳戳，你真的了解回流和重绘吗?
严重性： 在性能优先的前提下，性能消耗 回流 大于 重绘</description>
    </item>
    
  </channel>
</rss>