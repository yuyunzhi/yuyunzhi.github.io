<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code通用 on 余韵之</title>
    <link>http://www.yuyunzhi.com/categories/code%E9%80%9A%E7%94%A8/</link>
    <description>Recent content in Code通用 on 余韵之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 16 Sep 2019 16:52:16 +0800</lastBuildDate>
    
	<atom:link href="http://www.yuyunzhi.com/categories/code%E9%80%9A%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>web前后端的基础知识</title>
      <link>http://www.yuyunzhi.com/common-web-principle/</link>
      <pubDate>Mon, 16 Sep 2019 16:52:16 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-web-principle/</guid>
      <description>一、在打开网页的时候发生了什么？ 比如说 taobao.com 按回车一瞬间后到页面全部完成发生了什么?
不同的计算机组成的网络是可以互相通信和连接的，我们每一台主机都对应了自己的一个32位地址(4个字节)，如:115.118.112.3,这种方式的网络协议版本为IPV4。
从这个地址我们可以看出一些比较有趣的事，一个byte最大可以存255,4个字节最多能存约42亿个数字，大约到了90年代发现42亿也不够用了，于是升级到了128位的网络协议版本IPV6，可以理解为地球上每一粒沙子分配一个地址，来避免IPV4地址不足。
1、DNS域名解析-缓存 如果要一个人要和别的主机通信，就需要知道别的主机IP地址，由于IP地址对人来说不好记忆，所以就需要另外一个服务，DNS （Domain Name Service）域名服务，那么当用户输入域名的时候，就会通过域名服务器解析域名得到IP地址返回。
当然中间还有跳了一步，比如说本地已经保存了 taobao.com 及对应的IP地址，那么就不需要进行DNS解析了来节约”翻译”域名的时间。无论是windows还是Mac,都可以通过本地的文件host文件来覆盖掉,Mac 路径：sudo /etc/hosts
2、端口 如果你的电脑开了很多程序，但网线只有一根，从网线传输的数据怎么知道是哪个程序呢？ 比如你开了QQ、浏览器、微信，数据传递如何对应？这时候就用到了端口(port)，
端口可以理解为自己的电脑有很多的&amp;quot;港口&amp;rdquo;，编号为，1，2，3，4，5……65536个港口，那么每个数据包就会分配到自己对应的端口上。端口指定了你请求网站的归属地
注意：
  HTTPS协议默认端口是443,当你请求https://taobao.com的时候，完全等价于请求https://taobao.com:443
  HTTP协议默认端口是80,当你请求http://taobao.com的时候，完全等价于请求http://taobao.com:80
  3、数据流 在计算机协议中常用的通信协议有TCP、UDP协议 TCP基于流的协议、也是全双工协议。可以理解为一个双向的高速公路，当你向远端服务器发送请求的时候就在本地的端口和远端的端口开辟了一个双向的高速公路，而中间跑的不是车而是数据，并且是可以同时发送数据。
数据流是一个个字节组成的，又称作为字节流。TCP协议规定了字节流在网络上发送和接收的方式。
TCP协议之上是HTTP协议 超文本传输协议，超文本的意思是如果遵循了HTTP协议不仅仅可以在双向数据流上跑字节流还可以跑文件、跑图片等等。
那每一个数据流长什么样子？
 Request请求   Response响应  4、数据是如何被浏览器处理的？ 在网络上传的只是字节流
比如当你发送请求给淘宝后，会获得 HTTP Response 的响应头和响应体，响应体 不仅仅可以是文本，还可以是二进制数据（图片、音频、下载的文件……）
输入url后的响应体以标签开头
这就是，HTML 超文本标记语言。当浏览器看到标签的时候就知道这是一个html，并且一行一行进行相应的文本、样式的解析和下载。</description>
    </item>
    
    <item>
      <title>命令行</title>
      <link>http://www.yuyunzhi.com/common-command-line/</link>
      <pubDate>Fri, 23 Aug 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-command-line/</guid>
      <description>一、什么是命令行  内核：负责操作系统最底层操作的东西 shell:通过命令行负责与内核交互 命令行：cmd、power shell、git bash、zsh  你不能直接操作内核，你需要通过命令行来操作
二、我们为什么需要命令行  因为所有公司的服务器都运行在linux 将工作自动化、自动化是一切生产力的根源 相比GUI，命令行更容易开发维护 远程连接时，命令行占用的资源远低于GUI 命令行上的开发者工具更丰富  三、命令行的历史与流派  UNIX家族 奇葩 windows  四、命令的全部要素  四个要素：可执行程序（Executable）、参数、环境变量（Environment variable）、工作目录（Working directory）。以上四个要素就可以重现一个命令 可执行程序：ls -a ls 是可执行程序  去哪里找程序？Windows：Path环境变量 + 当前⽬录，UNIX/Linux：PATH环境变量 脚本语言解释器：在脚本的第⼀⾏指定解释器（shebang）   参数：java -version java 后面的都是参数 环境变量：  进程：进程是计算机程序运⾏的最⼩单位，独占⾃⼰的内存空间和⽂件资源 每个进程都和⼀组变量相绑定，传递不同的环境变量可以让程序表现出不同的⾏为 在进程的fork过程中，环境变量可以被完全继承 所有的操作系统/编程语⾔都⽀持环境变量 有局部和全局的环境变量区分   工作目录：命令所在的目录是工作目录pwd。绝对路径，是从根目录开始的路径。相对路径，相对于当前工作目录的路径  </description>
    </item>
    
    <item>
      <title>Charles抓包(Mac)</title>
      <link>http://www.yuyunzhi.com/common-charles/</link>
      <pubDate>Wed, 19 Jun 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-charles/</guid>
      <description>一、安装 去官网下载，点这里
二、激活 网上的激活账号:Help-&amp;gt;Registered
Registered Name: https://zhile.io License Key: 48891cf209c6d32bf4 三、配置 1、配置PC端：   Help-&amp;gt;SSL Proxying-&amp;gt;Install Charles Root Certificate
  打开后发现证书并不是信任的。双击证书把信任改为始终信任
  Proxy -&amp;gt; SSL Proxy Settings，勾选 Enable SSL Proxying，，这里可以用 *.443
  2、配置手机端：   让手机连的wifi和电脑的 wifi 一致
  查看本机IP地址：Help-&amp;gt;Local IP Address
  Proxy -&amp;gt; Proxy Settings默认端口是8888，根据实际情况可修改。
  打开手机中的设置，所选wifi高级设置-&amp;gt;代理（手动），配置代理服务器主机名（本机IP地址）-&amp;gt; 配置代理服务器端口（charles默认为8888）
  手机安装证（为了查看 https请求）：手机端连上电脑的代理后 ，浏览器访问SSL证书下载地址后直接安装：http://chls.pro/ssl。证书下载地址也可在电脑端 Help-&amp;gt;SSL Proxying—&amp;gt;Install Charles Root Certificate on a Mobile Device or Remote Brower 下查询确认，以此为准。 手机端证书仅对一台PC有效，如要再其他PC端抓取https，需要连接对应的代理后再次安装证书。</description>
    </item>
    
    <item>
      <title>代码优化思路</title>
      <link>http://www.yuyunzhi.com/common-code-optimization/</link>
      <pubDate>Sat, 09 Feb 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-code-optimization/</guid>
      <description>一、代码优化的基本原则  易读性优先 如果不是性能瓶颈，就不要为了性能而改写代码 复杂性守恒原则：无论你怎么写代码，复杂性都是不会消失的  二、优化思路  SCSS:将页面多次使用的颜色提取出来保存在变量，常用的代码块提取出来使用@include导入 基础组件、共用样式、共用JS全局引入 命名的词性  普通变量/属性用「名词」 bool变量/属性用「形容词」或者「be动词」或者「情态动词」或者「hasX」 普通函数/方法用「动词」开头 回调、钩子函数用「介词」开头，或用「动词的现在完成时态」 容易混淆的地方加前缀   使用函数来改代码  两处以上的相同的代码或功能封装 一般一个函数超过5行会有进一步优化的空间   表驱动编程 抽象函数处理复杂逻辑，返回Boolean值 用对象来组织代码，就比如vue里的js  </description>
    </item>
    
    <item>
      <title>Dashboard一般设计思路</title>
      <link>http://www.yuyunzhi.com/common-dashboard/</link>
      <pubDate>Fri, 08 Feb 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-dashboard/</guid>
      <description>一、RESTful API 是什么？  用自己的话来表达就是，遵守一定的规则来给接口url取名字的方法论 所有的东西都是资源，用户是资源、支付是资源、课程是资源…… 每个资源有4种不同的动作：增、删、改、查 以一个课程来举例  增 post 增加一个： /courses 创建的内容JSON 删 delete 删除一个：/courses/:id 改 patch 修改一个：/courses/:id 改的内容JSON 查 get 查所有：/courses 查一个：/courses/:id 注意查又分两种情况返回：html，json,由前端发的请求Accept来确定具体返回哪种类型 直接从浏览器输入url,会自动以text/html的类型返回 从请求中获取，需要设置请求头accept类型 二、前后端JSON如何设计？  前端给后端传上面？后端给前端传上面？ 举例登录功能  前端给后端传： { 手机号, 密码 } 后端成功，返回前端： { 状态码200, data：{用户的信息数据} } 后端失败、返回前端： { 状态码4XX, errors:[中文原因1、中文原因2……] }  举例展示多个资源  前端根据接口查询 后端成功，返回前端： { 状态码200, data:[{渲染的数据}、{渲染的数据}……], pager：{每页几个、当前页、总共多少页、总共多少个数据} } 后端失败、返回前端： { 状态码4XX, errors:[中文原因1、中文原因2……] } 三、前端权限如何设计？  什么是权限？你能做什么？你不能做什么？ 角色和权限需要区分开，权限用二进制数组来对应，然后一一映射 前端界面的权限思路:  显示不同的菜单(前端可以直接固定写不同角色能看什么菜单) 分div，封装全局API 后端返回权限状态码    注意：写一个全局的can（userRole,basic）返回一个Boolean。所有的复杂的判断在can里面实现，那么html的展示逻辑就很简单了。</description>
    </item>
    
    <item>
      <title>Git配置命令缩写</title>
      <link>http://www.yuyunzhi.com/common-git-abbreviation/</link>
      <pubDate>Sat, 12 Jan 2019 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-git-abbreviation/</guid>
      <description>配置用户名之后git会在用户目录下面创建一个配置文件 .gitconfig  1、windows用户  一般在目录 $HOME 目录下, 注意, HOME是系统变量, 保存的是用户的目录. 运行以下命令则可以找到用户目录:  echo $HOME 2、Mac和Linux  配置在用户目录: ~/.gitconfig  3、推荐配置 [user] name = {Name} email = {Email} [alias] st = status cm = commit br = branch co = checkout df = diff rt = remote lg = log --color --graph --pretty=format:&amp;#39;%C(yellow)%h%Creset -%Cred%d%Creset %s %C(bold blue)(%cn %cr)%Creset&amp;#39; ll = log --color --graph --pretty=format:&amp;#39;%C(yellow)%h%Creset -%Cred%d%Creset %s %C(bold blue)(%cn %cr)%Creset&amp;#39; --no-merges --stat up = push origin master pr = pull --rebase [core] excludesfile = /Users/Kid7st/.</description>
    </item>
    
    <item>
      <title>常用在线工具</title>
      <link>http://www.yuyunzhi.com/common-tools/</link>
      <pubDate>Fri, 26 Oct 2018 23:00:23 +0900</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-tools/</guid>
      <description>1、图片背景  https://www.desktoppr.co/ https://alpha.wallhaven.cc/  2、图片压缩（可批量）  https://tinypng.com/  3、CSS动画效果  http://animista.net/  4、文件格式转换  https://smallpdf.com/  5、字体大小转换  http://pxtoem.com/  6、UI设计  http://www.uiimg.com/Material https://dribbble.com/ 交互设计:可以用 Axure RP、墨刀、Sketch.app 视觉设计：可以用 Photoshop、Fireworks、Sketch.app  7、图标  http://www.iconfont.cn/  8、图床  https://sm.ms/  9、cdn(库)  https://cdnjs.com/ https://www.bootcdn.cn/  10、鼠标样式大全  http://css-cursor.techstream.org/  11、CSS渐变代码生成器  http://www.colorzilla.com/gradient-editor/  12、JSON格式化工具  http://www.bejson.com/  </description>
    </item>
    
    <item>
      <title>发布npm包</title>
      <link>http://www.yuyunzhi.com/common-npm-publish/</link>
      <pubDate>Tue, 16 Oct 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-npm-publish/</guid>
      <description>一、发布前  确保自己的代码已经测试通过才发布  二、上传代码至npmjs.org  注意每次上传时要更新 package.json 版本 在根目录下创建index.js,在index.js里将你想要导出的内容全部导出 如：  import Button from &amp;#39;./src/button&amp;#39; import ButtonGroup from &amp;#39;./src/button-group&amp;#39; import Icon from &amp;#39;./src/icon&amp;#39; export {Button,ButtonGroup,Icon} 由于node目前不支持import 所以需要进行转义，在上传前对自己的代码输入以下命令行 npx parcel build index.js --no-minify 将 package.json 的 main 改为 dist/index.js  注册一个账户:https://www.npmjs.com/ 确认一下邮箱（必须） 根目录运行 npm adduser，如果错误提示里面含有 https://registry.npm.taobao.org 则说明你的 npm 源目前为淘宝源，需要更换为 npm 官方源 运行 npm publish 同时需要输入账号和密码  三、下载使用包  下载包 npm i xxx 更新包 npm update xxx  如果是为了本地调试可以在项目目录使用 npm link，然后在使用之处运行 npm link xxx，就是最新了</description>
    </item>
    
    <item>
      <title>部署hexo及配置next主题</title>
      <link>http://www.yuyunzhi.com/common-hexo-next/</link>
      <pubDate>Fri, 28 Sep 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-hexo-next/</guid>
      <description>这个部署分为三个部分： 1、配置本地电脑与github的SSH(这里就不说了) 2、安装hexo，安装next主题 3、替换部分配置文件
 一、安装 1、安装hexo   进入一个安全的目录，比如 cd ~/Desktop 或者 cd ~/Documents，别在根目录 / 瞎搞。以后所有的教程第一步都是「进入一个安全的目录，别在根目录瞎搞」，只有 ~ 里面的目录是你能碰的！ 重新部署可省略该步骤
  在 GitHub 上新建一个空 repo，repo 名称是「你的用户名.github.io」（注意个用户名是你的GitHub用户名，不是你的电脑用户名）
  npm install -g hexo-cli，安装 Hexo
  hexo init myBlog
  cd myBlog
  npm i
  hexo new 开博大吉，你会看到一个 md 文件的路径 重新部署可省略该步骤
  start xxxxx.md,编辑这个 md 文件，内容自己想（Ubuntu 系统用 xdg-open xxxxx.md 命令） 重新部署可省略该步骤
  start _config.</description>
    </item>
    
    <item>
      <title>http请求响应,curl命令用法</title>
      <link>http://www.yuyunzhi.com/common-http-curl/</link>
      <pubDate>Wed, 11 Apr 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-http-curl/</guid>
      <description>HTTP 请求包括哪些部分，如何用Chrome开发者工具查看 HTTP 请求内容? HTTP 响应包括哪些部分，如何用Chrome开发者工具查看 HTTP 响应内容? 如何使用 curl 命令?
 一、笔记 1、李爵士发明了URI（统一资源标识符）、HTTP（超文本传输协议）、HTML（超文本标记语言）； 2、URL（统一资源定位符）、URN（统一资源名称）； 3、URL组成：协议+域名+路径+查询参数+锚点+端口，http://baidu.com是二级域名，http://www.baidu.com是三级域名； 4、DNS（域名解析系统）：输入域名，输出IP； 5、server服务器、client客户端、http协议，一个端口只做1件事，80端口用来服务http； 6、浏览器负责发起请求，服务器在 80 端口接收请求，服务器负责返回内容（响应），浏览器负责下载响应内容，HTTP 的作用就是指导浏览器和服务器如何进行沟通； 7、状态码解释：点这里
二、http请求包含部分 1、格式 1动词 路径 协议/版本 2 Key1: value1 2 Key2: value2 2 Key3: value3 2 Content-Type: application/x-www-form-urlencoded 2 Host: www.baidu.com 2 User-Agent: curl/7.54.0 3 4 要上传的数据 **解释：**请求最多包含4部分，最少包含3部分；第3部分永远是一个回车；动词可以是GET（获取） POST（上传）PUT（整体更新）PATCH（局部更新）DELETE（删除）HEAD OPTIONS等；路径包含查询参数但不包括锚点；如果没有写路径，默认为/；Content-Type标注了第四部分的格式；
2、GET请求例子 1 GET / HTTP/1.1 2 Host: www.baidu.com 2 User-Agent: curl/7.54.0 2 Accept: */* 2 Frank: xxx 3 3、POST请求例子 1 POST /path HTTP/1.</description>
    </item>
    
    <item>
      <title>git分支合并master</title>
      <link>http://www.yuyunzhi.com/common-git-master/</link>
      <pubDate>Fri, 06 Apr 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-git-master/</guid>
      <description>假如我们现在在dev分支上，刚开发完项目，执行了下列命令  git add . git commit -m ‘dev&amp;#39; git push -u origin dev   然后我们要把dev分支的代码合并到master分支上 该如何？
  首先切换到master分支上
  git checkout master  如果是多人开发的话 需要把远程master上的代码pull下来  git pull origin master  然后我们把dev分支的代码合并到master上  //有权限改动master git merge dev //没有权限改动master git branch dev git merge master   这个时候打开编辑器，处理冲突的代码
  这个时候打开编辑器，处理冲突的代码
  这个时候打开编辑器，处理冲突的代码
  然后查看状态
  git status  执行下面命令即可  //有权限 git push origin master //无权限 git push origin dev  在merge的状态下，提交到仓库  git add .</description>
    </item>
    
    <item>
      <title>Git入门</title>
      <link>http://www.yuyunzhi.com/common-git-get-started/</link>
      <pubDate>Sun, 01 Apr 2018 23:00:23 +0800</pubDate>
      
      <guid>http://www.yuyunzhi.com/common-git-get-started/</guid>
      <description>一、安装git 直接官网下载，持续按下一步即可。(这里就不重复啰嗦了)
二、配置git 1、git bash打开后输入一下命令，否则Git无法使用 git config --global user.name xxx git config --global user.email yyy git config --global push.default simple git config --global core.quotepath false git config --global core.editor &amp;#34;vim&amp;#34; 2、输入命令生成秘钥： ssh-keygen -t rsa -b 4096 -C &amp;#34;xxxxx@xxxxx.com&amp;#34; //邮箱更换成自己的 然后直接三个回车会生成id_rsa 和id_rsa.pub文件 cat ~/.ssh/id_rsa.pub //输入命令打开id_rsa.pub 复制内容，在GitHub里新建SSH文件保存即 3、配置小插件（命令使用与查询）： 输入命令安装：npm install -g tldr 附上使用地址:命令行查询
三、使用git仓库的方法 1、本地建立仓库  在D盘建立一个名为xxx的文件夹； 右击git bash打开; 输入命令git init回车，初始化仓库自动生成.git文件; 然后用户进行自定义创建，修改等步骤; 随后输入命令git add 文件名，把文件暂存; 输入命令git commit -m &amp;ldquo;修改解释&amp;rdquo;。 完成  2、将本地仓库上传到github上  在GitHub建立新的仓库，命名为xxx，与本地仓库名一致； 本地仓库修改完成了def的步骤后，依次在gitbash输入一下命令，直接复制最好；如果你有本地仓库，就直接输入第四行和第五行命令就行；  echo &amp;#34;abc&amp;#34; &amp;gt;&amp;gt; README.</description>
    </item>
    
  </channel>
</rss>